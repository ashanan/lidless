#!/usr/bin/env python

import sys
import time
import threading

import json

import percept
import historical

import lidlessweb
import lidlessirc

class ThreadManager(object) :
	def __init__(self) :
		self.thrs = []

	def add(self, thr) :
		self.thrs.append(thr)

	def start(self) :
		for t in self.thrs :
			t.start()

	def stop(self) :
		print 'stopping'
		for t in self.thrs :
			t.stop()
		print 'joining'
		for t in self.thrs :
			t.join()
			print 'joined thread %s' % str(t)
		self.thrs = []

	@property
	def done(self) :
		return self.thrs == []

def usage() :
	# TODO take a 'what you did wrong' string and display it with the usage
	raise RuntimeError
	print 'usage: lidless <configfile>'
	sys.exit(1)

def all_in(stanza, keys) :
	for k in keys :
		if k not in stanza :
			usage()

if __name__ == '__main__' :
#	try :
	fh = open(sys.argv[1])
	try :
		conf = json.load(fh)
	finally :
		fh.close()
	#except :
#		usage()

	t = ThreadManager()
	percepts = {}

	if not isinstance(conf, list) :
		usage()

	# TODO regexes for all the setting types, people are crazy
	for stanza in conf :
		if not isinstance(stanza, dict) :
			usage()
		if 'type' not in stanza :
			usage()

		if stanza['type'] == 'camera' :
			all_in(stanza, ['url', 'name'])
		else :
			continue

		auth = None
		zm_auth_hash_secret = None
		if 'username' in stanza or 'password' in stanza :
			all_in(stanza, ['username', 'password'])
			auth = stanza['username'], stanza['password']
			if 'zm_auth_hash_secret' in stanza :
				zm_auth_hash_secret = stanza['zm_auth_hash_secret']
		perc = percept.Percept(stanza['name'], stanza['url'], auth=auth, zm_auth_hash_secret=zm_auth_hash_secret)
		t.add(perc)

		perc.history = historical.History(perc)
		t.add(perc.history)

		percepts[perc.camname] = perc

	for stanza in conf :
		if stanza['type'] == 'irc' :
			all_in(stanza, ['server', 'nick', 'channel'])
			irct = lidlessirc.IRCThread(stanza['server'], stanza['nick'], stanza['channel'], percepts)
			t.add(irct)
		elif stanza['type'] == 'web' :
			all_in(stanza, ['port'])
			lweb = lidlessweb.LidlessWeb(percepts, stanza['port'])
			t.add(lweb)
	
	t.start()

	while not t.done :
		try :
			while not t.done :
				time.sleep(.1)
		except KeyboardInterrupt :
			t.stop()
