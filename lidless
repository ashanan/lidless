#!/usr/bin/env python

import sys
import time
import threading

import json
import irclib

import percept
import historical
import lidlessweb

class IRCThread(threading.Thread) :
	def __init__(self, server, nick, chan, perc) :
		self.server = server
		self.nick = nick
		self.chan = chan
		self.perc = perc
		self.ok = True
		threading.Thread.__init__(self)

	def stop(self) :
		self.ok = False
		self.client.clean_shutdown()
		time.sleep(1)

	def run(self) :
		while self.ok :
			print 'creating new irc connection'
			self.client = LidlessIRC(self.server, self.nick, self.chan, self.perc)
			self.client.conn()

			while not self.client.dead :
				self.client.ircobj.process_once(0.2)

class LidlessIRC(irclib.SimpleIRCClient) :
	def __init__(self, server, nick, chan, percepts) :
		self.percepts = percepts
		self.dead = False
		
		irclib.SimpleIRCClient.__init__(self)
		self._server = server
		self._nick = nick
		self._chan = chan

	def conn(self) :
		self.disconnecting = False
		self.connect(self._server, 6667, self._nick)
		self.connection.join(self._chan)
	
	def clean_shutdown(self) :
		if not self.disconnecting :
			self.disconnecting = True
			try :
				self.disconnect("lidless exiting")
			except :
				pass
		print 'shut down cleanly'
		self.dead = True
	
	def on_disconnect(self, c, e) :
		print 'got disconnect'
		self.dead = True

	def on_join(self, c, e) :
		pass

	def on_pubmsg(self, c, e) :
		chan = e.target()
		txt = e.arguments()[0]

		if txt == '!space' :
			if not self.percepts :
				msg = 'no cameras.'
			else :
				msgs = []
				for pname in self.percepts :
					bus = percepts[pname].busy

					if bus is None :
						state = "unknown"
					else :
						state = '%d%% busy' % round(bus * 100)

					msgs.append('%s: %s' % (pname, state))
				msg = ', '.join(msgs)
			
			self.connection.privmsg(chan, msg)

class ThreadManager(object) :
	def __init__(self) :
		self.thrs = []

	def add(self, thr) :
		self.thrs.append(thr)

	def start(self) :
		for t in self.thrs :
			t.start()

	def stop(self) :
		print 'stopping'
		for t in self.thrs :
			t.stop()
		print 'joining'
		for t in self.thrs :
			t.join()
			print 'joined thread %s' % str(t)
		self.thrs = []

	@property
	def done(self) :
		return self.thrs == []

def usage() :
	raise RuntimeError
	print 'usage: lidless server nick chan url [port]'
	sys.exit(1)

def all_in(stanza, keys) :
	for k in keys :
		if k not in stanza :
			usage()

if __name__ == '__main__' :
#	try :
	fh = open(sys.argv[1])
	try :
		conf = json.load(fh)
	finally :
		fh.close()
	#except :
#		usage()

	t = ThreadManager()
	percepts = {}

	if not isinstance(conf, list) :
		usage()

	# TODO regexes for all the setting types, people are crazy
	for stanza in conf :
		if not isinstance(stanza, dict) :
			usage()
		if 'type' not in stanza :
			usage()

		if stanza['type'] == 'camera' :
			all_in(stanza, ['url', 'name'])
		else :
			continue

		auth = None
		if 'username' in stanza or 'password' in stanza :
			all_in(stanza, ['username', 'password'])
			auth = stanza['username'], stanza['password']

		perc = percept.Percept(stanza['name'], stanza['url'], auth=auth)
		t.add(perc)

		perc.history = historical.History(perc)
		t.add(perc.history)

		percepts[perc.camname] = perc

	for stanza in conf :
		if stanza['type'] == 'irc' :
			all_in(stanza, ['server', 'nick', 'channel'])
			irct = IRCThread(stanza['server'], stanza['nick'], stanza['channel'], percepts)
			t.add(irct)
		elif stanza['type'] == 'web' :
			all_in(stanza, ['port'])
			lweb = lidlessweb.LidlessWeb(percepts, stanza['port'])
			t.add(lweb)
	
	t.start()

	while not t.done :
		try :
			while not t.done :
				time.sleep(.1)
		except KeyboardInterrupt :
			t.stop()
