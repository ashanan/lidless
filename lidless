#!/usr/bin/env python

import sys
import time
import threading

import json

import percept
import historical

import lidlessweb
import lidlessirc

class ThreadManager(object) :
	def __init__(self) :
		self.thrs = []

	def add(self, thr) :
		self.thrs.append(thr)

	def start(self) :
		for t in self.thrs :
			t.start()

	def stop(self) :
		print 'stopping'
		for t in self.thrs :
			t.stop()
		print 'joining'
		for t in self.thrs :
			t.join()
			print 'joined thread %s' % str(t)
		self.thrs = []

	@property
	def done(self) :
		return self.thrs == []

def usage() :
	# TODO take a 'what you did wrong' string and display it with the usage
	print 'usage: lidless <configfile> [role]\n\n\tconfigfile should be json\n\trole is default, allows selecting certain roles for processing in different processes.'
	sys.exit(1)

def all_in(stanza, keys) :
	for k in keys :
		if k not in stanza :
			usage()

def roled(role, stanza, thr, deactivate=False) :
	if stanza['role'] != role :
		if deactivate :
			thr.deactivate()
		else :
			thr.stop()
		return True
	return False

if __name__ == '__main__' :
	fh = None
	try :
		fh = open(sys.argv[1])
		conf = json.load(fh)
	except :
		usage()
	finally :
		if fh :
			fh.close()

	try :
		role = sys.argv[2]
	except :
		role = 'default'

	t = ThreadManager()
	percepts = {}

	if not isinstance(conf, list) :
		usage()

	disqualified = True
	used_epr = False
	er = lidlessweb.EndpointRouter()

	# TODO regexes for all the setting types, people are crazy
	for stanza in conf :
		if not isinstance(stanza, dict) :
			usage()
		if 'type' not in stanza :
			usage()

		if 'role' not in stanza :
			stanza['role'] = 'default'

		if stanza['type'] == 'camera' :
			all_in(stanza, ['url', 'name'])
		else :
			continue

		auth = None
		zm_ahs = None
		zmq_url = None
		if 'username' in stanza or 'password' in stanza :
			all_in(stanza, ['username', 'password'])
			auth = stanza['username'], stanza['password']
			if 'zm_auth_hash_secret' in stanza :
				zm_ahs = stanza['zm_auth_hash_secret']
			if 'zmq_url' in stanza :
				zmq_url = stanza['zmq_url']
				import zmq # just to error fast, rather than slow; before any threads start.
		perc = percept.Percept(stanza['name'], stanza['url'], auth=auth, zm_auth_hash_secret=zm_ahs, zmq_url=zmq_url)
		t.add(perc)

		perc.history = historical.History(perc.camname, perc)
		t.add(perc.history)

		disqualified &= roled(role, stanza, perc, deactivate=True)
		disqualified &= roled(role, stanza, perc.history)

		percepts[perc.camname] = perc
		er.reg_camera(stanza['name'], stanza['role'])

	for stanza in conf :
		if stanza['type'] == 'irc' :
			all_in(stanza, ['server', 'nick', 'channel'])
			irct = lidlessirc.LidlessBotThread(stanza['server'], stanza['nick'], stanza['channel'], percepts)
			t.add(irct)
			disqualified &= roled(role, stanza, irct)
		elif stanza['type'] == 'web' :
			all_in(stanza, ['port'])

			# default proxy settings
			stanza.setdefault('proxy_endpoint', None)
			stanza.setdefault('proxy_mode', None)

			ep = stanza['proxy_endpoint']

			if stanza['proxy_mode'] == 'auto' :
				ep = er
				used_epr = True
			elif stanza['proxy_endpoint'] is None and stanza['proxy_mode'] is None:
				er.reg_web(stanza['role'], stanza['port'])

			lweb = lidlessweb.LidlessWeb(percepts, port=stanza['port'], endpoint=ep)
			t.add(lweb)
			disqualified &= roled(role, stanza, lweb)

	if used_epr and not er.valid :
		print "Error: proxy_mode: auto was used but not all cameras have a local non-proxy web host"
		sys.exit(1)

	if disqualified :
		# this means that none of the stanzas applied here: give up, this can accomplish nothing.
		print 'Error: role %s has no active stanzas, aborting.' % role
		sys.exit(1)

	t.start()

	while not t.done :
		try :
			while not t.done :
				time.sleep(.1)
		except KeyboardInterrupt :
			t.stop()
